Standard ML of New Jersey (64-bit) v110.99.3 [built: Thu Jul 28 00:35:16 2022]
- [autoloading]
[library $smlnj/compiler/current.cm is stable]
[library $smlnj/compiler/amd64.cm is stable]
[library $smlnj/viscomp/core.cm is stable]
[library $smlnj/viscomp/basics.cm is stable]
[library $smlnj/viscomp/elabdata.cm is stable]
[library $smlnj/viscomp/elaborate.cm is stable]
[library $compiler/(core.cm):Library/const-arith/sources.cm is stable]
[library $smlnj/MLRISC/Lib.cm is stable]
[library $SMLNJ-MLRISC/Lib.cm is stable]
[library $SMLNJ-LIB/Util/smlnj-lib.cm is stable]
[library $smlnj/MLRISC/Control.cm is stable]
[library $SMLNJ-MLRISC/Control.cm is stable]
[library $controls-lib.cm(=$SMLNJ-LIB/Controls)/controls-lib.cm is stable]
[library $basis.cm(=$SMLNJ-BASIS)/basis.cm is stable]
[library $basis.cm(=$SMLNJ-BASIS)/(basis.cm):basis-common.cm is stable]
[library $smlnj/smlnj-lib/controls-lib.cm is stable]
[autoloading done]
val it = () : unit
datatype Variable = GLL_Variable of string
type Integer_Constant = int
type Boolean_Constant = bool
datatype Arithmetic_Op = Div | Minus | Plus | Times
datatype Relational_Op = Eq | Ge | Gt | Le | Lt | Ne
datatype Boolean_Op = And | Or
datatype IntegerExpression
  = Arithmetic_Operation_IntegerExpression of IntegerExpression
                                               * Arithmetic_Op
                                               * IntegerExpression
  | Constant_IntegerExpression of int
  | Variable_IntegerExpression of Variable
datatype BooleanExpression
  = Boolean_Operation_BooleanExpression of BooleanExpression * Boolean_Op
                                            * BooleanExpression
  | Constant_BooleanExpression of bool
  | Relational_Operation_BooleanExpression of IntegerExpression
                                               * Relational_Op
                                               * IntegerExpression
  | Variable_BooleanExpression of Variable
datatype Expression
  = BooleanExpression_Expression of BooleanExpression
  | IntegerExpression_Expression of IntegerExpression
datatype Instruction
  = BooleanExpression_Instruction of BooleanExpression * Instruction
  | BooleanExpression_Instruction_Instruction of BooleanExpression
                                                  * Instruction * Instruction
  | Instruction_List of Instruction list
  | Skip
  | Variable_Expression_Instruction of Variable * Expression
datatype Type = BooleanType | IntegerType
type Declaration = Variable * Type
type DeclarationList = Declaration list
datatype Program = GLL_Program of (Variable * Type) list * Instruction
val i = GLL_Variable "i" : Variable
val sum = GLL_Variable "sum" : Variable
val n = GLL_Variable "n" : Variable
val zero = 0 : int
val one = 1 : int
val twelve = 12 : int
val integerExpressionI = Variable_IntegerExpression (GLL_Variable "i")
  : IntegerExpression
val integerExpressionOne = Constant_IntegerExpression 1 : IntegerExpression
val integerExpressionIPlusOne =
  Arithmetic_Operation_IntegerExpression
    (Variable_IntegerExpression (GLL_Variable "i"),Plus,
     Constant_IntegerExpression 1) : IntegerExpression
val expressionIPlusOne =
  IntegerExpression_Expression
    (Arithmetic_Operation_IntegerExpression
       (Variable_IntegerExpression (GLL_Variable "i"),Plus,
        Constant_IntegerExpression 1)) : Expression
val iEqualsIPlusOne =
  Variable_Expression_Instruction
    (GLL_Variable "i",
     IntegerExpression_Expression
       (Arithmetic_Operation_IntegerExpression
          (Variable_IntegerExpression (GLL_Variable "i"),Plus,
           Constant_IntegerExpression 1))) : Instruction
val integerExpressionN = Variable_IntegerExpression (GLL_Variable "n")
  : IntegerExpression
val integerExpressionNDivI =
  Arithmetic_Operation_IntegerExpression
    (Variable_IntegerExpression (GLL_Variable "n"),Div,
     Variable_IntegerExpression (GLL_Variable "i")) : IntegerExpression
val integerExpressionITimesNDivI =
  Arithmetic_Operation_IntegerExpression
    (Variable_IntegerExpression (GLL_Variable "i"),Times,
     Arithmetic_Operation_IntegerExpression
       (Variable_IntegerExpression (GLL_Variable "n"),Div,
        Variable_IntegerExpression (GLL_Variable "i"))) : IntegerExpression
val integerExpressionNMinusITimesNDivI =
  Arithmetic_Operation_IntegerExpression
    (Variable_IntegerExpression (GLL_Variable "n"),Minus,
     Arithmetic_Operation_IntegerExpression
       (Variable_IntegerExpression (GLL_Variable "i"),Times,
        Arithmetic_Operation_IntegerExpression
          (Variable_IntegerExpression (GLL_Variable "n"),Div,
           Variable_IntegerExpression (GLL_Variable "i"))))
  : IntegerExpression
val integerExpressionZero = Constant_IntegerExpression 0 : IntegerExpression
val innerIfBooleanExpression =
  Relational_Operation_BooleanExpression
    (Arithmetic_Operation_IntegerExpression
       (Variable_IntegerExpression (GLL_Variable "n"),Minus,
        Arithmetic_Operation_IntegerExpression
          (Variable_IntegerExpression (GLL_Variable "i"),Times,
           Arithmetic_Operation_IntegerExpression
             (Variable_IntegerExpression (GLL_Variable "n"),Div,
              Variable_IntegerExpression (GLL_Variable "i")))),Eq,
     Constant_IntegerExpression 0) : BooleanExpression
val integerExpressionSum = Variable_IntegerExpression (GLL_Variable "sum")
  : IntegerExpression
val integerExpressionSumPlusI =
  Arithmetic_Operation_IntegerExpression
    (Variable_IntegerExpression (GLL_Variable "sum"),Plus,
     Variable_IntegerExpression (GLL_Variable "i")) : IntegerExpression
val expressionSumPlusI =
  IntegerExpression_Expression
    (Arithmetic_Operation_IntegerExpression
       (Variable_IntegerExpression (GLL_Variable "sum"),Plus,
        Variable_IntegerExpression (GLL_Variable "i"))) : Expression
val sumEqualsSumPlusI =
  Variable_Expression_Instruction
    (GLL_Variable "sum",
     IntegerExpression_Expression
       (Arithmetic_Operation_IntegerExpression
          (Variable_IntegerExpression (GLL_Variable "sum"),Plus,
           Variable_IntegerExpression (GLL_Variable "i")))) : Instruction
val innerIfThenElse =
  BooleanExpression_Instruction_Instruction
    (Relational_Operation_BooleanExpression
       (Arithmetic_Operation_IntegerExpression
          (Variable_IntegerExpression (GLL_Variable "n"),Minus,
           Arithmetic_Operation_IntegerExpression
             (Variable_IntegerExpression (GLL_Variable "i"),Times,
              Arithmetic_Operation_IntegerExpression
                (Variable_IntegerExpression (GLL_Variable "n"),Div,
                 Variable_IntegerExpression (GLL_Variable "i")))),Eq,
        Constant_IntegerExpression 0),
     Variable_Expression_Instruction
       (GLL_Variable "sum",
        IntegerExpression_Expression
          (Arithmetic_Operation_IntegerExpression
             (Variable_IntegerExpression (GLL_Variable "sum"),Plus,
              Variable_IntegerExpression (GLL_Variable "i")))),Skip)
  : Instruction
val instructionListInsideWhile =
  [BooleanExpression_Instruction_Instruction
     (Relational_Operation_BooleanExpression
        (Arithmetic_Operation_IntegerExpression
           (Variable_IntegerExpression (GLL_Variable "n"),Minus,
            Arithmetic_Operation_IntegerExpression
              (Variable_IntegerExpression (GLL_Variable "i"),Times,
               Arithmetic_Operation_IntegerExpression
                 (Variable_IntegerExpression (GLL_Variable "n"),Div,
                  Variable_IntegerExpression (GLL_Variable "i")))),Eq,
         Constant_IntegerExpression 0),
      Variable_Expression_Instruction
        (GLL_Variable "sum",
         IntegerExpression_Expression
           (Arithmetic_Operation_IntegerExpression
              (Variable_IntegerExpression (GLL_Variable "sum"),Plus,
               Variable_IntegerExpression (GLL_Variable "i")))),Skip),
   Variable_Expression_Instruction
     (GLL_Variable "i",
      IntegerExpression_Expression
        (Arithmetic_Operation_IntegerExpression
           (Variable_IntegerExpression (GLL_Variable "i"),Plus,
            Constant_IntegerExpression 1)))] : Instruction list
val instructionInsideWhile =
  Instruction_List
    [BooleanExpression_Instruction_Instruction
       (Relational_Operation_BooleanExpression
          (Arithmetic_Operation_IntegerExpression
             (Variable_IntegerExpression (GLL_Variable "n"),Minus,
              Arithmetic_Operation_IntegerExpression
                (Variable_IntegerExpression (GLL_Variable "i"),Times,
                 Arithmetic_Operation_IntegerExpression
                   (Variable_IntegerExpression (GLL_Variable "n"),Div,
                    Variable_IntegerExpression (GLL_Variable "i")))),Eq,
           Constant_IntegerExpression 0),
        Variable_Expression_Instruction
          (GLL_Variable "sum",
           IntegerExpression_Expression
             (Arithmetic_Operation_IntegerExpression
                (Variable_IntegerExpression (GLL_Variable "sum"),Plus,
                 Variable_IntegerExpression (GLL_Variable "i")))),Skip),
     Variable_Expression_Instruction
       (GLL_Variable "i",
        IntegerExpression_Expression
          (Arithmetic_Operation_IntegerExpression
             (Variable_IntegerExpression (GLL_Variable "i"),Plus,
              Constant_IntegerExpression 1)))] : Instruction
val whileBooleanExpression =
  Relational_Operation_BooleanExpression
    (Variable_IntegerExpression (GLL_Variable "i"),Lt,
     Variable_IntegerExpression (GLL_Variable "n")) : BooleanExpression
val whileInstruction =
  BooleanExpression_Instruction
    (Relational_Operation_BooleanExpression
       (Variable_IntegerExpression (GLL_Variable "i"),Lt,
        Variable_IntegerExpression (GLL_Variable "n")),
     Instruction_List
       [BooleanExpression_Instruction_Instruction
          (Relational_Operation_BooleanExpression
             (Arithmetic_Operation_IntegerExpression
                (Variable_IntegerExpression (GLL_Variable "n"),Minus,
                 Arithmetic_Operation_IntegerExpression
                   (Variable_IntegerExpression (GLL_Variable "i"),Times,
                    Arithmetic_Operation_IntegerExpression
                      (Variable_IntegerExpression (GLL_Variable "n"),Div,
                       Variable_IntegerExpression (GLL_Variable "i")))),Eq,
              Constant_IntegerExpression 0),
           Variable_Expression_Instruction
             (GLL_Variable "sum",
              IntegerExpression_Expression
                (Arithmetic_Operation_IntegerExpression
                   (Variable_IntegerExpression (GLL_Variable "sum"),Plus,
                    Variable_IntegerExpression (GLL_Variable "i")))),Skip),
        Variable_Expression_Instruction
          (GLL_Variable "i",
           IntegerExpression_Expression
             (Arithmetic_Operation_IntegerExpression
                (Variable_IntegerExpression (GLL_Variable "i"),Plus,
                 Constant_IntegerExpression 1)))]) : Instruction
val expressionOne =
  IntegerExpression_Expression (Constant_IntegerExpression 1) : Expression
val instructionIEqualsOne =
  Variable_Expression_Instruction
    (GLL_Variable "i",
     IntegerExpression_Expression (Constant_IntegerExpression 1))
  : Instruction
val outerElseInstructionsList =
  [Variable_Expression_Instruction
     (GLL_Variable "i",
      IntegerExpression_Expression (Constant_IntegerExpression 1)),
   BooleanExpression_Instruction
     (Relational_Operation_BooleanExpression
        (Variable_IntegerExpression (GLL_Variable "i"),Lt,
         Variable_IntegerExpression (GLL_Variable "n")),
      Instruction_List
        [BooleanExpression_Instruction_Instruction
           (Relational_Operation_BooleanExpression
              (Arithmetic_Operation_IntegerExpression
                 (Variable_IntegerExpression (GLL_Variable "n"),Minus,
                  Arithmetic_Operation_IntegerExpression
                    (Variable_IntegerExpression (GLL_Variable "i"),Times,
                     Arithmetic_Operation_IntegerExpression
                       (Variable_IntegerExpression (GLL_Variable "n"),Div,
                        Variable_IntegerExpression (GLL_Variable "i")))),Eq,
               Constant_IntegerExpression 0),
            Variable_Expression_Instruction
              (GLL_Variable "sum",
               IntegerExpression_Expression
                 (Arithmetic_Operation_IntegerExpression
                    (Variable_IntegerExpression (GLL_Variable "sum"),Plus,
                     Variable_IntegerExpression (GLL_Variable "i")))),Skip),
         Variable_Expression_Instruction
           (GLL_Variable "i",
            IntegerExpression_Expression
              (Arithmetic_Operation_IntegerExpression
                 (Variable_IntegerExpression (GLL_Variable "i"),Plus,
                  Constant_IntegerExpression 1)))])] : Instruction list
val outerElseInstruction =
  Instruction_List
    [Variable_Expression_Instruction
       (GLL_Variable "i",
        IntegerExpression_Expression (Constant_IntegerExpression 1)),
     BooleanExpression_Instruction
       (Relational_Operation_BooleanExpression
          (Variable_IntegerExpression (GLL_Variable "i"),Lt,
           Variable_IntegerExpression (GLL_Variable "n")),
        Instruction_List
          [BooleanExpression_Instruction_Instruction
             (Relational_Operation_BooleanExpression
                (Arithmetic_Operation_IntegerExpression
                   (Variable_IntegerExpression (GLL_Variable "n"),Minus,
                    Arithmetic_Operation_IntegerExpression
                      (Variable_IntegerExpression (GLL_Variable "i"),Times,
                       Arithmetic_Operation_IntegerExpression
                         (Variable_IntegerExpression (GLL_Variable "n"),Div,
                          Variable_IntegerExpression (GLL_Variable "i")))),Eq,
                 Constant_IntegerExpression 0),
              Variable_Expression_Instruction
                (GLL_Variable "sum",
                 IntegerExpression_Expression
                   (Arithmetic_Operation_IntegerExpression
                      (Variable_IntegerExpression (GLL_Variable "sum"),Plus,
                       Variable_IntegerExpression (GLL_Variable "i")))),Skip),
           Variable_Expression_Instruction
             (GLL_Variable "i",
              IntegerExpression_Expression
                (Arithmetic_Operation_IntegerExpression
                   (Variable_IntegerExpression (GLL_Variable "i"),Plus,
                    Constant_IntegerExpression 1)))])] : Instruction
val outerIfBooleanExpression =
  Relational_Operation_BooleanExpression
    (Variable_IntegerExpression (GLL_Variable "n"),Le,
     Constant_IntegerExpression 0) : BooleanExpression
val expressionZero =
  IntegerExpression_Expression (Constant_IntegerExpression 0) : Expression
val instructionSumEqualsZero =
  Variable_Expression_Instruction
    (GLL_Variable "sum",
     IntegerExpression_Expression (Constant_IntegerExpression 0))
  : Instruction
val outerIfThenElse =
  BooleanExpression_Instruction_Instruction
    (Relational_Operation_BooleanExpression
       (Variable_IntegerExpression (GLL_Variable "n"),Le,
        Constant_IntegerExpression 0),
     Variable_Expression_Instruction
       (GLL_Variable "sum",
        IntegerExpression_Expression (Constant_IntegerExpression 0)),
     Instruction_List
       [Variable_Expression_Instruction
          (GLL_Variable "i",
           IntegerExpression_Expression (Constant_IntegerExpression 1)),
        BooleanExpression_Instruction
          (Relational_Operation_BooleanExpression
             (Variable_IntegerExpression (GLL_Variable "i"),Lt,
              Variable_IntegerExpression (GLL_Variable "n")),
           Instruction_List
             [BooleanExpression_Instruction_Instruction
                (Relational_Operation_BooleanExpression
                   (Arithmetic_Operation_IntegerExpression
                      (Variable_IntegerExpression (GLL_Variable "n"),Minus,
                       Arithmetic_Operation_IntegerExpression
                         (Variable_IntegerExpression (GLL_Variable "i"),Times,
                          Arithmetic_Operation_IntegerExpression
                            (Variable_IntegerExpression (GLL_Variable "n"),
                             Div,
                             Variable_IntegerExpression (GLL_Variable "i")))),
                    Eq,Constant_IntegerExpression 0),
                 Variable_Expression_Instruction
                   (GLL_Variable "sum",
                    IntegerExpression_Expression
                      (Arithmetic_Operation_IntegerExpression
                         (Variable_IntegerExpression (GLL_Variable "sum"),
                          Plus,Variable_IntegerExpression (GLL_Variable "i")))),
                 Skip),
              Variable_Expression_Instruction
                (GLL_Variable "i",
                 IntegerExpression_Expression
                   (Arithmetic_Operation_IntegerExpression
                      (Variable_IntegerExpression (GLL_Variable "i"),Plus,
                       Constant_IntegerExpression 1)))])]) : Instruction
val integerExpressionTwelve = Constant_IntegerExpression 12
  : IntegerExpression
val expressionTwelve =
  IntegerExpression_Expression (Constant_IntegerExpression 12) : Expression
val instructionNEqualsTwelve =
  Variable_Expression_Instruction
    (GLL_Variable "n",
     IntegerExpression_Expression (Constant_IntegerExpression 12))
  : Instruction
val instructionListForProgram =
  [Variable_Expression_Instruction
     (GLL_Variable "n",
      IntegerExpression_Expression (Constant_IntegerExpression 12)),
   Variable_Expression_Instruction
     (GLL_Variable "sum",
      IntegerExpression_Expression (Constant_IntegerExpression 0)),
   BooleanExpression_Instruction_Instruction
     (Relational_Operation_BooleanExpression
        (Variable_IntegerExpression (GLL_Variable "n"),Le,
         Constant_IntegerExpression 0),
      Variable_Expression_Instruction
        (GLL_Variable "sum",
         IntegerExpression_Expression (Constant_IntegerExpression 0)),
      Instruction_List
        [Variable_Expression_Instruction
           (GLL_Variable "i",
            IntegerExpression_Expression (Constant_IntegerExpression 1)),
         BooleanExpression_Instruction
           (Relational_Operation_BooleanExpression
              (Variable_IntegerExpression (GLL_Variable "i"),Lt,
               Variable_IntegerExpression (GLL_Variable "n")),
            Instruction_List
              [BooleanExpression_Instruction_Instruction
                 (Relational_Operation_BooleanExpression
                    (Arithmetic_Operation_IntegerExpression
                       (Variable_IntegerExpression (GLL_Variable "n"),Minus,
                        Arithmetic_Operation_IntegerExpression
                          (Variable_IntegerExpression (GLL_Variable "i"),
                           Times,
                           Arithmetic_Operation_IntegerExpression
                             (Variable_IntegerExpression (GLL_Variable "n"),
                              Div,
                              Variable_IntegerExpression (GLL_Variable "i")))),
                     Eq,Constant_IntegerExpression 0),
                  Variable_Expression_Instruction
                    (GLL_Variable "sum",
                     IntegerExpression_Expression
                       (Arithmetic_Operation_IntegerExpression
                          (Variable_IntegerExpression (GLL_Variable "sum"),
                           Plus,Variable_IntegerExpression (GLL_Variable "i")))),
                  Skip),
               Variable_Expression_Instruction
                 (GLL_Variable "i",
                  IntegerExpression_Expression
                    (Arithmetic_Operation_IntegerExpression
                       (Variable_IntegerExpression (GLL_Variable "i"),Plus,
                        Constant_IntegerExpression 1)))])])]
  : Instruction list
val instructionsForProgram =
  Instruction_List
    [Variable_Expression_Instruction
       (GLL_Variable "n",
        IntegerExpression_Expression (Constant_IntegerExpression 12)),
     Variable_Expression_Instruction
       (GLL_Variable "sum",
        IntegerExpression_Expression (Constant_IntegerExpression 0)),
     BooleanExpression_Instruction_Instruction
       (Relational_Operation_BooleanExpression
          (Variable_IntegerExpression (GLL_Variable "n"),Le,
           Constant_IntegerExpression 0),
        Variable_Expression_Instruction
          (GLL_Variable "sum",
           IntegerExpression_Expression (Constant_IntegerExpression 0)),
        Instruction_List
          [Variable_Expression_Instruction
             (GLL_Variable "i",
              IntegerExpression_Expression (Constant_IntegerExpression 1)),
           BooleanExpression_Instruction
             (Relational_Operation_BooleanExpression
                (Variable_IntegerExpression (GLL_Variable "i"),Lt,
                 Variable_IntegerExpression (GLL_Variable "n")),
              Instruction_List
                [BooleanExpression_Instruction_Instruction
                   (Relational_Operation_BooleanExpression
                      (Arithmetic_Operation_IntegerExpression
                         (Variable_IntegerExpression (GLL_Variable "n"),Minus,
                          Arithmetic_Operation_IntegerExpression
                            (Variable_IntegerExpression (GLL_Variable "i"),
                             Times,
                             Arithmetic_Operation_IntegerExpression
                               (Variable_IntegerExpression (GLL_Variable "n"),
                                Div,
                                Variable_IntegerExpression (GLL_Variable "i")))),
                       Eq,Constant_IntegerExpression 0),
                    Variable_Expression_Instruction
                      (GLL_Variable "sum",
                       IntegerExpression_Expression
                         (Arithmetic_Operation_IntegerExpression
                            (Variable_IntegerExpression (GLL_Variable "sum"),
                             Plus,
                             Variable_IntegerExpression (GLL_Variable "i")))),
                    Skip),
                 Variable_Expression_Instruction
                   (GLL_Variable "i",
                    IntegerExpression_Expression
                      (Arithmetic_Operation_IntegerExpression
                         (Variable_IntegerExpression (GLL_Variable "i"),Plus,
                          Constant_IntegerExpression 1)))])])] : Instruction
val declarationN = (GLL_Variable "n",IntegerType) : Variable * Type
val declarationSum = (GLL_Variable "sum",IntegerType) : Variable * Type
val declarationI = (GLL_Variable "i",IntegerType) : Variable * Type
val declarationListForProgram =
  [(GLL_Variable "n",IntegerType),(GLL_Variable "sum",IntegerType),
   (GLL_Variable "i",IntegerType)] : (Variable * Type) list
val finalProgram =
  GLL_Program
    ([(GLL_Variable "n",IntegerType),(GLL_Variable "sum",IntegerType),
      (GLL_Variable "i",IntegerType)],
     Instruction_List
       [Variable_Expression_Instruction
          (GLL_Variable "n",
           IntegerExpression_Expression (Constant_IntegerExpression 12)),
        Variable_Expression_Instruction
          (GLL_Variable "sum",
           IntegerExpression_Expression (Constant_IntegerExpression 0)),
        BooleanExpression_Instruction_Instruction
          (Relational_Operation_BooleanExpression
             (Variable_IntegerExpression (GLL_Variable "n"),Le,
              Constant_IntegerExpression 0),
           Variable_Expression_Instruction
             (GLL_Variable "sum",
              IntegerExpression_Expression (Constant_IntegerExpression 0)),
           Instruction_List
             [Variable_Expression_Instruction
                (GLL_Variable "i",
                 IntegerExpression_Expression (Constant_IntegerExpression 1)),
              BooleanExpression_Instruction
                (Relational_Operation_BooleanExpression
                   (Variable_IntegerExpression (GLL_Variable "i"),Lt,
                    Variable_IntegerExpression (GLL_Variable "n")),
                 Instruction_List
                   [BooleanExpression_Instruction_Instruction
                      (Relational_Operation_BooleanExpression
                         (Arithmetic_Operation_IntegerExpression
                            (Variable_IntegerExpression (GLL_Variable "n"),
                             Minus,
                             Arithmetic_Operation_IntegerExpression
                               (Variable_IntegerExpression (GLL_Variable "i"),
                                Times,
                                Arithmetic_Operation_IntegerExpression
                                  (Variable_IntegerExpression
                                     (GLL_Variable "n"),Div,
                                   Variable_IntegerExpression
                                     (GLL_Variable "i")))),Eq,
                          Constant_IntegerExpression 0),
                       Variable_Expression_Instruction
                         (GLL_Variable "sum",
                          IntegerExpression_Expression
                            (Arithmetic_Operation_IntegerExpression
                               (Variable_IntegerExpression
                                  (GLL_Variable "sum"),Plus,
                                Variable_IntegerExpression (GLL_Variable "i")))),
                       Skip),
                    Variable_Expression_Instruction
                      (GLL_Variable "i",
                       IntegerExpression_Expression
                         (Arithmetic_Operation_IntegerExpression
                            (Variable_IntegerExpression (GLL_Variable "i"),
                             Plus,Constant_IntegerExpression 1)))])])])
  : Program
stdIn:292.14-292.16 Warning: calling polyEqual
val NoThisVar = fn : (Variable * Type) list -> Variable -> bool
val ValidDecList = fn : Declaration list -> bool
val goodCaseFor2 = true : bool
val badDeclarationList =
  [(GLL_Variable "i",IntegerType),(GLL_Variable "n",IntegerType),
   (GLL_Variable "sum",IntegerType),(GLL_Variable "i",IntegerType)]
  : (Variable * Type) list
val badCaseFor2 = false : bool
datatype InternalType = BoolRep | IntRep | NoDecRep
type SymbolTable = (Variable * InternalType) list
val SymbolTablePlusOne = fn
  : Variable * Type -> SymbolTable -> (Variable * InternalType) list
val FullSymbolTableCreation = fn
  : (Variable * Type) list -> (Variable * InternalType) list
val symbolTableForProgram =
  [(GLL_Variable "n",IntRep),(GLL_Variable "sum",IntRep),
   (GLL_Variable "i",IntRep)] : (Variable * InternalType) list
stdIn:348.63 Warning: calling polyEqual
val SearchVarInternalType = fn
  : Variable -> (Variable * InternalType) list -> InternalType
val firstGoodCaseFor7 = IntRep : InternalType
val secondGoodCaseFor7 = IntRep : InternalType
val thirdGoodCaseFor7 = IntRep : InternalType
val badVariable = GLL_Variable "newVariable" : Variable
val it = NoDecRep : InternalType
val ValidIntExp = fn : IntegerExpression -> SymbolTable -> bool
val firstGoodCaseFor8 = true : bool
val secondGoodCaseFor8 = true : bool
val thirdGoodCaseFor8 = true : bool
val firstBadCaseFor8 = false : bool
val badIntegerExpression =
  Variable_IntegerExpression (GLL_Variable "newVariable") : IntegerExpression
val secondBadCaseFor8 = false : bool
val ValidBoolExp = fn : BooleanExpression -> SymbolTable -> bool
val constantBooleanExpressionForTesting = Constant_BooleanExpression false
  : BooleanExpression
val firstGoodCaseFor9 = true : bool
val booleanVariable = GLL_Variable "booleanVariable" : Variable
val symbolTableWithBool =
  [(GLL_Variable "n",IntRep),(GLL_Variable "sum",IntRep),
   (GLL_Variable "i",IntRep),(GLL_Variable "booleanVariable",BoolRep)]
  : (Variable * InternalType) list
val variableBooleanExpressionForTesting =
  Variable_BooleanExpression (GLL_Variable "booleanVariable")
  : BooleanExpression
val secondGoodCaseFor9 = true : bool
val thirdGoodCaseFor9 = true : bool
val booleanOperatorBooleanExpressionForTesting =
  Boolean_Operation_BooleanExpression
    (Relational_Operation_BooleanExpression
       (Variable_IntegerExpression (GLL_Variable "n"),Le,
        Constant_IntegerExpression 0),And,
     Relational_Operation_BooleanExpression
       (Variable_IntegerExpression (GLL_Variable "i"),Lt,
        Variable_IntegerExpression (GLL_Variable "n"))) : BooleanExpression
val fourthGoodCaseFor9 = true : bool
val badCaseFor9 = false : bool
val ValidInstruction = fn : Instruction -> SymbolTable -> bool
val firstGoodCaseFor10 = true : bool
val booleanAssignmentInstruction =
  Variable_Expression_Instruction
    (GLL_Variable "booleanVariable",
     BooleanExpression_Expression
       (Relational_Operation_BooleanExpression
          (Variable_IntegerExpression (GLL_Variable "i"),Lt,
           Variable_IntegerExpression (GLL_Variable "n")))) : Instruction
val secondGoodCaseFor10 = true : bool
val thirdGoodCaseFor10 = true : bool
val fourthGoodCaseFor10 = true : bool
val fifthGoodCaseFor10 = true : bool
val firstBadCaseFor10 = false : bool
val badExpression =
  IntegerExpression_Expression
    (Variable_IntegerExpression (GLL_Variable "newVariable")) : Expression
val badInstruction =
  Variable_Expression_Instruction
    (GLL_Variable "sum",
     IntegerExpression_Expression
       (Variable_IntegerExpression (GLL_Variable "newVariable")))
  : Instruction
val secondBadCaseFor10 = false : bool
exception InvalidDeclarationList
exception InvalidProgramBody
val ValidProgram = fn : Program -> bool
val goodCaseFor13 = true : bool
val programWithBadDeclarationList =
  GLL_Program
    ([(GLL_Variable "i",IntegerType),(GLL_Variable "n",IntegerType),
      (GLL_Variable "sum",IntegerType),(GLL_Variable "i",IntegerType)],
     Instruction_List
       [Variable_Expression_Instruction
          (GLL_Variable "n",
           IntegerExpression_Expression (Constant_IntegerExpression 12)),
        Variable_Expression_Instruction
          (GLL_Variable "sum",
           IntegerExpression_Expression (Constant_IntegerExpression 0)),
        BooleanExpression_Instruction_Instruction
          (Relational_Operation_BooleanExpression
             (Variable_IntegerExpression (GLL_Variable "n"),Le,
              Constant_IntegerExpression 0),
           Variable_Expression_Instruction
             (GLL_Variable "sum",
              IntegerExpression_Expression (Constant_IntegerExpression 0)),
           Instruction_List
             [Variable_Expression_Instruction
                (GLL_Variable "i",
                 IntegerExpression_Expression (Constant_IntegerExpression 1)),
              BooleanExpression_Instruction
                (Relational_Operation_BooleanExpression
                   (Variable_IntegerExpression (GLL_Variable "i"),Lt,
                    Variable_IntegerExpression (GLL_Variable "n")),
                 Instruction_List
                   [BooleanExpression_Instruction_Instruction
                      (Relational_Operation_BooleanExpression
                         (Arithmetic_Operation_IntegerExpression
                            (Variable_IntegerExpression (GLL_Variable "n"),
                             Minus,
                             Arithmetic_Operation_IntegerExpression
                               (Variable_IntegerExpression (GLL_Variable "i"),
                                Times,
                                Arithmetic_Operation_IntegerExpression
                                  (Variable_IntegerExpression
                                     (GLL_Variable "n"),Div,
                                   Variable_IntegerExpression
                                     (GLL_Variable "i")))),Eq,
                          Constant_IntegerExpression 0),
                       Variable_Expression_Instruction
                         (GLL_Variable "sum",
                          IntegerExpression_Expression
                            (Arithmetic_Operation_IntegerExpression
                               (Variable_IntegerExpression
                                  (GLL_Variable "sum"),Plus,
                                Variable_IntegerExpression (GLL_Variable "i")))),
                       Skip),
                    Variable_Expression_Instruction
                      (GLL_Variable "i",
                       IntegerExpression_Expression
                         (Arithmetic_Operation_IntegerExpression
                            (Variable_IntegerExpression (GLL_Variable "i"),
                             Plus,Constant_IntegerExpression 1)))])])])
  : Program
val programWithBadBody =
  GLL_Program
    ([(GLL_Variable "n",IntegerType),(GLL_Variable "sum",IntegerType),
      (GLL_Variable "i",IntegerType)],
     Variable_Expression_Instruction
       (GLL_Variable "sum",
        IntegerExpression_Expression
          (Variable_IntegerExpression (GLL_Variable "newVariable"))))
  : Program
datatype MemoryValue = BoolValue of bool | IntValue of int | UnknownValue
type ProgState = Variable -> MemoryValue
val PSInitial = fn : Variable -> MemoryValue
val firstTestCaseFor3 = UnknownValue : MemoryValue
val secondTestCaseFor3 = UnknownValue : MemoryValue
val thirdTestCaseFor3 = UnknownValue : MemoryValue
stdIn:566.65 Warning: calling polyEqual
val PSUpdateOneMapping = fn
  : Variable -> MemoryValue -> ProgState -> Variable -> MemoryValue
val mv1 = IntValue 2 : MemoryValue
val myPS1 = fn : Variable -> MemoryValue
val firstTestCasefor4 = IntValue 2 : MemoryValue
val secondTestCasefor4 = UnknownValue : MemoryValue
val mv2 = IntValue 5 : MemoryValue
val myPS2 = fn : Variable -> MemoryValue
val thirdTestCaseFor4 = IntValue 5 : MemoryValue
val fourthTestCaseFor4 = IntValue 2 : MemoryValue
val fifthTestCaseFor4 = UnknownValue : MemoryValue
exception DivisonError
exception IncomptiableArthiExp
val ArithExpCalculation = fn
  : MemoryValue * Arithmetic_Op * MemoryValue -> MemoryValue
val firstGoodCaseFor7 = IntValue 10 : MemoryValue
val secondGoodCaseFor7 = IntValue ~5 : MemoryValue
val thirdGoodCaseFor7 = IntValue 800 : MemoryValue
val fourthGoodCaseFor7 = IntValue 10 : MemoryValue
exception IncomptiableRelaExp
val RelaExpCalculation = fn
  : MemoryValue * Relational_Op * MemoryValue -> MemoryValue
val GoodCaseFor9 = BoolValue true : MemoryValue
exception IncomptiableBoolExp
val BoolExpCalculation = fn
  : MemoryValue * Boolean_Op * MemoryValue -> MemoryValue
val constantBooleanForTesting1 = true : bool
val constantBooleanForTesting2 = false : bool
val GoodCaseFor11 = BoolValue true : MemoryValue
val MeaningIntExp = fn : IntegerExpression -> ProgState -> MemoryValue
val GoodCaseOneFor12 = IntValue 0 : MemoryValue
val GoodCaseTwoFor12 = IntValue 5 : MemoryValue
val GoodCaseTwoFor12 = IntValue 7 : MemoryValue
val MeaningBoolExp = fn : BooleanExpression -> ProgState -> MemoryValue
val myPS3 = fn : Variable -> MemoryValue
val firstGoodCaseFor13 = BoolValue false : MemoryValue
val secondGoodCaseFor13 = BoolValue true : MemoryValue
val myPS4 = fn : Variable -> MemoryValue
val booleanVariable2 = GLL_Variable "booleanVariable2" : Variable
val myPS5 = fn : Variable -> MemoryValue
val thirdGoodCaseFor13 = BoolValue false : MemoryValue
val fourthGoodCaseFor13 = BoolValue false : MemoryValue
val MeaningExp = fn : Expression -> ProgState -> MemoryValue
val firstGoodCaseFor14 = IntValue 0 : MemoryValue
val secondGoodCaseFor14 = BoolValue false : MemoryValue
val MeaningInst = fn : Instruction -> ProgState -> ProgState
val firstGoodCaseFor15 = fn : ProgState
val verifyingFirstCasefor15 = IntValue 7 : MemoryValue
val secondGoodCaseFor15 = fn : ProgState
val verifyingSecondCasefor15ForI = IntValue 3 : MemoryValue
val verifyingSecondCasefor15ForSum = IntValue 8 : MemoryValue
val thirdGoodCaseFor15 = fn : ProgState
val verifyingThirdCasefor15ForI = IntValue 3 : MemoryValue
val verifyingThirdCasefor15ForSum = IntValue 5 : MemoryValue
val fourthGoodCaseFor15 = fn : ProgState
val verifyingfourthGoodCaseFor15ForI = IntValue 10 : MemoryValue
exception ProgramError
val MeaningProgram = fn : Program -> ProgState
val testingFor17 = fn : ProgState
val verifying16ForI = IntValue 12 : MemoryValue
val verifying16ForN = IntValue 12 : MemoryValue
val verifying16ForSum = IntValue 16 : MemoryValue
